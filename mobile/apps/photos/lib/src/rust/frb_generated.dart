// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: require_trailing_commas

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'dart:async';
import 'dart:convert';

import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:photos/src/rust/api/image_processing.dart';
import 'package:photos/src/rust/api/simple.dart';
import 'package:photos/src/rust/frb_generated.dart';
import 'package:photos/src/rust/frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
    bool forceSameCodegenVersion = true,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
      forceSameCodegenVersion: forceSameCodegenVersion,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiSimpleInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.11.1';

  @override
  int get rustContentHash => 1140226238;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_photos',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  String crateApiSimpleGreet({required String name});

  Future<void> crateApiSimpleInitApp();

  Future<
          (
            Uint8List,
            BigInt,
            BigInt,
            Uint8List,
            BigInt,
            BigInt,
            Uint8List,
            BigInt,
            BigInt
          )>
      crateApiImageProcessingProcessImageMlFromData(
          {required List<int> rgbaData,
          required int width,
          required int height});

  Future<
          (
            Uint8List,
            BigInt,
            BigInt,
            Uint8List,
            BigInt,
            BigInt,
            Uint8List,
            BigInt,
            BigInt
          )>
      crateApiImageProcessingProcessImageMlFromPath(
          {required String imagePath});
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  String crateApiSimpleGreet({required String name}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final arg0 = cst_encode_String(name);
        return wire.wire__crate__api__simple__greet(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleGreetConstMeta,
      argValues: [name],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleGreetConstMeta => const TaskConstMeta(
        debugName: "greet",
        argNames: ["name"],
      );

  @override
  Future<void> crateApiSimpleInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire__crate__api__simple__init_app(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  Future<
          (
            Uint8List,
            BigInt,
            BigInt,
            Uint8List,
            BigInt,
            BigInt,
            Uint8List,
            BigInt,
            BigInt
          )>
      crateApiImageProcessingProcessImageMlFromData(
          {required List<int> rgbaData,
          required int width,
          required int height}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final arg0 = cst_encode_list_prim_u_8_loose(rgbaData);
        final arg1 = cst_encode_u_32(width);
        final arg2 = cst_encode_u_32(height);
        return wire
            .wire__crate__api__image_processing__process_image_ml_from_data(
                port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_record_list_prim_u_8_strict_usize_usize_list_prim_u_8_strict_usize_usize_list_prim_u_8_strict_usize_usize,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiImageProcessingProcessImageMlFromDataConstMeta,
      argValues: [rgbaData, width, height],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiImageProcessingProcessImageMlFromDataConstMeta =>
      const TaskConstMeta(
        debugName: "process_image_ml_from_data",
        argNames: ["rgbaData", "width", "height"],
      );

  @override
  Future<
          (
            Uint8List,
            BigInt,
            BigInt,
            Uint8List,
            BigInt,
            BigInt,
            Uint8List,
            BigInt,
            BigInt
          )>
      crateApiImageProcessingProcessImageMlFromPath(
          {required String imagePath}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final arg0 = cst_encode_String(imagePath);
        return wire
            .wire__crate__api__image_processing__process_image_ml_from_path(
                port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_record_list_prim_u_8_strict_usize_usize_list_prim_u_8_strict_usize_usize_list_prim_u_8_strict_usize_usize,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiImageProcessingProcessImageMlFromPathConstMeta,
      argValues: [imagePath],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiImageProcessingProcessImageMlFromPathConstMeta =>
      const TaskConstMeta(
        debugName: "process_image_ml_from_path",
        argNames: ["imagePath"],
      );

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  (
    Uint8List,
    BigInt,
    BigInt,
    Uint8List,
    BigInt,
    BigInt,
    Uint8List,
    BigInt,
    BigInt
  ) dco_decode_record_list_prim_u_8_strict_usize_usize_list_prim_u_8_strict_usize_usize_list_prim_u_8_strict_usize_usize(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 9) {
      throw Exception('Expected 9 elements, got ${arr.length}');
    }
    return (
      dco_decode_list_prim_u_8_strict(arr[0]),
      dco_decode_usize(arr[1]),
      dco_decode_usize(arr[2]),
      dco_decode_list_prim_u_8_strict(arr[3]),
      dco_decode_usize(arr[4]),
      dco_decode_usize(arr[5]),
      dco_decode_list_prim_u_8_strict(arr[6]),
      dco_decode_usize(arr[7]),
      dco_decode_usize(arr[8]),
    );
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  (
    Uint8List,
    BigInt,
    BigInt,
    Uint8List,
    BigInt,
    BigInt,
    Uint8List,
    BigInt,
    BigInt
  ) sse_decode_record_list_prim_u_8_strict_usize_usize_list_prim_u_8_strict_usize_usize_list_prim_u_8_strict_usize_usize(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final var_field0 = sse_decode_list_prim_u_8_strict(deserializer);
    final var_field1 = sse_decode_usize(deserializer);
    final var_field2 = sse_decode_usize(deserializer);
    final var_field3 = sse_decode_list_prim_u_8_strict(deserializer);
    final var_field4 = sse_decode_usize(deserializer);
    final var_field5 = sse_decode_usize(deserializer);
    final var_field6 = sse_decode_list_prim_u_8_strict(deserializer);
    final var_field7 = sse_decode_usize(deserializer);
    final var_field8 = sse_decode_usize(deserializer);
    return (
      var_field0,
      var_field1,
      var_field2,
      var_field3,
      var_field4,
      var_field5,
      var_field6,
      var_field7,
      var_field8
    );
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  int cst_encode_u_32(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  int cst_encode_u_8(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  void cst_encode_unit(void raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint8List(self is Uint8List ? self : Uint8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void
      sse_encode_record_list_prim_u_8_strict_usize_usize_list_prim_u_8_strict_usize_usize_list_prim_u_8_strict_usize_usize(
          (
            Uint8List,
            BigInt,
            BigInt,
            Uint8List,
            BigInt,
            BigInt,
            Uint8List,
            BigInt,
            BigInt
          ) self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.$1, serializer);
    sse_encode_usize(self.$2, serializer);
    sse_encode_usize(self.$3, serializer);
    sse_encode_list_prim_u_8_strict(self.$4, serializer);
    sse_encode_usize(self.$5, serializer);
    sse_encode_usize(self.$6, serializer);
    sse_encode_list_prim_u_8_strict(self.$7, serializer);
    sse_encode_usize(self.$8, serializer);
    sse_encode_usize(self.$9, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }
}
